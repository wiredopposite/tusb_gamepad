#pragma once

#include <stdint.h>
#include "tusb.h"

#define PS3_ENDPOINT_SIZE 64

#define PS3_JOYSTICK_MIN 0x00
#define PS3_JOYSTICK_MID 0x80
#define PS3_JOYSTICK_MAX 0xFF

typedef struct __attribute((packed, aligned(1)))
{
    uint8_t report_id;
    uint8_t unk0;

    uint8_t select : 1;
    uint8_t l3     : 1;
    uint8_t r3     : 1;
    uint8_t start  : 1;
    uint8_t up     : 1;
    uint8_t right  : 1;
    uint8_t down   : 1;
    uint8_t left   : 1;

    uint8_t l2       : 1;
    uint8_t r2       : 1;
    uint8_t l1       : 1;
    uint8_t r1       : 1;
    uint8_t triangle : 1;
    uint8_t circle   : 1;
    uint8_t cross    : 1;
    uint8_t square   : 1;

    uint8_t ps : 1;
    uint8_t    : 0;

    uint8_t unknown1;

    uint8_t left_x;
    uint8_t left_y;
    uint8_t right_x;
    uint8_t right_y;

	uint8_t unknown2[4];

	uint8_t up_axis;
	uint8_t right_axis;
	uint8_t down_axis;
	uint8_t left_axis;

	uint8_t l2_axis;
	uint8_t r2_axis;
	uint8_t l1_axis;
	uint8_t r1_axis;

	uint8_t triangle_axis;
	uint8_t circle_axis;
	uint8_t cross_axis;
	uint8_t square_axis;

    uint8_t unknown3[12];
	uint8_t battery;
	uint8_t unknown4[2];

    int16_t acceler_x;
    int16_t acceler_y;
    int16_t acceler_z;

    int16_t velocity_z;
} Dualshock3Report;

struct Dualshock3LED {
	uint8_t time_enabled; /* the total time the led is active (0xff means forever) */
	uint8_t duty_length;  /* how long a cycle is in deciseconds (0 means "really fast") */
	uint8_t enabled;
	uint8_t duty_off; /* % of duty_length the led is off (0xff means 100%) */
	uint8_t duty_on;  /* % of duty_length the led is on (0xff mean 100%) */
} __attribute__((packed));

struct Dualshock3Rumble {
	uint8_t padding;
	uint8_t right_duration; /* Right motor duration (0xff means forever) */
	uint8_t right_motor_on; /* Right (small) motor on/off, only supports values of 0 or 1 (off/on) */
	uint8_t left_duration;    /* Left motor duration (0xff means forever) */
	uint8_t left_motor_force; /* left (large) motor, supports force values from 0 to 255 */
} __attribute__((packed));

struct Dualshock3OutReport 
{
	struct Dualshock3Rumble rumble;
	uint8_t padding[4];
	uint8_t leds_bitmap; /* bitmap of enabled LEDs: LED_1 = 0x02, LED_2 = 0x04, ... */
	struct Dualshock3LED led[4];    /* LEDx at (4 - x) */
	struct Dualshock3LED _reserved; /* LED5, not actually soldered */
} __attribute__((packed));

static const uint8_t ps3_string_language[]     = { 0x09, 0x04 };
static const uint8_t ps3_string_manufacturer[] = "Sony";
static const uint8_t ps3_string_product[]      = "PLAYSTATION(R)3 Controller";
static const uint8_t ps3_string_version[]      = "1.0";

static const uint8_t *ps3_string_descriptors[] __attribute__((unused)) =
{
	ps3_string_language,
	ps3_string_manufacturer,
	ps3_string_product
	// ps3_string_version
};

static const uint8_t ps3_device_descriptor[] =
{
	0x12,        // bLength
	0x01,        // bDescriptorType (Device)
	0x00, 0x02,  // bcdUSB 2.00
	0x00,        // bDeviceClass (Use class information in the Interface Descriptors)
	0x00,        // bDeviceSubClass 
	0x00,        // bDeviceProtocol 
	0x40,        // bMaxPacketSize0 64
	0x4C, 0x05,  // idVendor 0x054C
	0x68, 0x02,  // idProduct 0x0268
	0x00, 0x01,  // bcdDevice 2.00
	0x01,        // iManufacturer (String Index)
	0x02,        // iProduct (String Index)
	0x00,        // iSerialNumber (String Index)
	0x01,        // bNumConfigurations 1
};

static const uint8_t ps3_report_descriptor[] =
{
	0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
	0x09, 0x04,        // Usage (Joystick)
	0xA1, 0x01,        // Collection (Application)
	0xA1, 0x02,        //   Collection (Logical)
	0x85, 0x01,        //     Report ID (1)
	0x75, 0x08,        //     Report Size (8)
	0x95, 0x01,        //     Report Count (1)
	0x15, 0x00,        //     Logical Minimum (0)
	0x26, 0xFF, 0x00,  //     Logical Maximum (255)
	0x81, 0x03,        //     Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
	0x75, 0x01,        //     Report Size (1)
	0x95, 0x13,        //     Report Count (19)
	0x15, 0x00,        //     Logical Minimum (0)
	0x25, 0x01,        //     Logical Maximum (1)
	0x35, 0x00,        //     Physical Minimum (0)
	0x45, 0x01,        //     Physical Maximum (1)
	0x05, 0x09,        //     Usage Page (Button)
	0x19, 0x01,        //     Usage Minimum (0x01)
	0x29, 0x13,        //     Usage Maximum (0x13)
	0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
	0x75, 0x01,        //     Report Size (1)
	0x95, 0x0D,        //     Report Count (13)
	0x06, 0x00, 0xFF,  //     Usage Page (Vendor Defined 0xFF00)
	0x81, 0x03,        //     Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
	0x15, 0x00,        //     Logical Minimum (0)
	0x26, 0xFF, 0x00,  //     Logical Maximum (255)
	0x05, 0x01,        //     Usage Page (Generic Desktop Ctrls)
	0x09, 0x01,        //     Usage (Pointer)
	0xA1, 0x00,        //     Collection (Physical)
	0x75, 0x08,        //       Report Size (8)
	0x95, 0x04,        //       Report Count (4)
	0x35, 0x00,        //       Physical Minimum (0)
	0x46, 0xFF, 0x00,  //       Physical Maximum (255)
	0x09, 0x30,        //       Usage (X)
	0x09, 0x31,        //       Usage (Y)
	0x09, 0x32,        //       Usage (Z)
	0x09, 0x35,        //       Usage (Rz)
	0x81, 0x02,        //       Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
	0xC0,              //     End Collection
	0x05, 0x01,        //     Usage Page (Generic Desktop Ctrls)
	0x75, 0x08,        //     Report Size (8)
	0x95, 0x27,        //     Report Count (39)
	0x09, 0x01,        //     Usage (Pointer)
	0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
	0x75, 0x08,        //     Report Size (8)
	0x95, 0x30,        //     Report Count (48)
	0x09, 0x01,        //     Usage (Pointer)
	0x91, 0x02,        //     Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
	0x75, 0x08,        //     Report Size (8)
	0x95, 0x30,        //     Report Count (48)
	0x09, 0x01,        //     Usage (Pointer)
	0xB1, 0x02,        //     Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
	0xC0,              //   End Collection
	0xA1, 0x02,        //   Collection (Logical)
	0x85, 0x02,        //     Report ID (2)
	0x75, 0x08,        //     Report Size (8)
	0x95, 0x30,        //     Report Count (48)
	0x09, 0x01,        //     Usage (Pointer)
	0xB1, 0x02,        //     Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
	0xC0,              //   End Collection
	0xA1, 0x02,        //   Collection (Logical)
	0x85, 0xEE,        //     Report ID (-18)
	0x75, 0x08,        //     Report Size (8)
	0x95, 0x30,        //     Report Count (48)
	0x09, 0x01,        //     Usage (Pointer)
	0xB1, 0x02,        //     Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
	0xC0,              //   End Collection
	0xA1, 0x02,        //   Collection (Logical)
	0x85, 0xEF,        //     Report ID (-17)
	0x75, 0x08,        //     Report Size (8)
	0x95, 0x30,        //     Report Count (48)
	0x09, 0x01,        //     Usage (Pointer)
	0xB1, 0x02,        //     Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
	0xC0,              //   End Collection
	0xC0,              // End Collection
};

// #define CONFIG_TOTAL_LEN (TUD_CONFIG_DESC_LEN + TUD_HID_DESC_LEN)

static const uint8_t ps3_configuration_descriptor[] =
{
	0x09,        // bLength
	0x02,        // bDescriptorType (Configuration)
	0x29, 0x00,  // wTotalLength 41
	0x01,        // bNumInterfaces 1
	0x01,        // bConfigurationValue
	0x00,        // iConfiguration (String Index)
	0x80,        // bmAttributes
	0xFA,        // bMaxPower 500mA

	0x09,        // bLength
	0x04,        // bDescriptorType (Interface)
	0x00,        // bInterfaceNumber 0
	0x00,        // bAlternateSetting
	0x02,        // bNumEndpoints 2
	0x03,        // bInterfaceClass
	0x00,        // bInterfaceSubClass
	0x00,        // bInterfaceProtocol
	0x00,        // iInterface (String Index)

	0x09,        // bLength
	0x21,        // bDescriptorType (HID)
	0x11, 0x01,  // bcdHID 1.11
	0x00,        // bCountryCode
	0x01,        // bNumDescriptors
	0x22,        // bDescriptorType[0] (HID)
	0x94, 0x00,  // wDescriptorLength[0] 148

	0x07,        // bLength
	0x05,        // bDescriptorType (Endpoint)
	0x02,        // bEndpointAddress (OUT/H2D)
	0x03,        // bmAttributes (Interrupt)
	0x40, 0x00,  // wMaxPacketSize 64
	0x0A,        // bInterval 10 (unit depends on device speed)

	0x07,        // bLength
	0x05,        // bDescriptorType (Endpoint)
	0x81,        // bEndpointAddress (IN/D2H)
	0x03,        // bmAttributes (Interrupt)
	0x40, 0x00,  // wMaxPacketSize 64
	0x0A,        // bInterval 10 (unit depends on device speed)
};

// static const uint8_t ps3_configuration_descriptor[] =
// {
// 	0x09,        // bLength
// 	0x02,        // bDescriptorType (Configuration)
// 	0x29, 0x00,  // wTotalLength 41
// 	0x01,        // bNumInterfaces 1
// 	0x01,        // bConfigurationValue
// 	0x00,        // iConfiguration (String Index)
// 	0x80,        // bmAttributes
// 	0xFA,        // bMaxPower 500mA

// 	0x09,        // bLength
// 	0x04,        // bDescriptorType (Interface)
// 	0x00,        // bInterfaceNumber 0
// 	0x00,        // bAlternateSetting
// 	0x02,        // bNumEndpoints 2
// 	0x03,        // bInterfaceClass
// 	0x00,        // bInterfaceSubClass
// 	0x00,        // bInterfaceProtocol
// 	0x00,        // iInterface (String Index)

// 	0x09,        // bLength
// 	0x21,        // bDescriptorType (HID)
// 	0x11, 0x01,  // bcdHID 1.11
// 	0x00,        // bCountryCode
// 	0x01,        // bNumDescriptors
// 	0x22,        // bDescriptorType[0] (HID)
// 	0x94, 0x00,  // wDescriptorLength[0] 148

// 	0x07,        // bLength
// 	0x05,        // bDescriptorType (Endpoint)
// 	0x02,        // bEndpointAddress (OUT/H2D)
// 	0x03,        // bmAttributes (Interrupt)
// 	0x40, 0x00,  // wMaxPacketSize 64
// 	0x0A,        // bInterval 10 (unit depends on device speed)

// 	0x07,        // bLength
// 	0x05,        // bDescriptorType (Endpoint)
// 	0x81,        // bEndpointAddress (IN/D2H)
// 	0x03,        // bmAttributes (Interrupt)
// 	0x40, 0x00,  // wMaxPacketSize 64
// 	0x0A,        // bInterval 10 (unit depends on device speed)
// };

// // get report request type 0xa1 wValue 0x0301
// static const uint8_t report_01[] =
// {
// 	0x00, 0x01, 0x03, 0x00, 0x05, 0x0c, 0x01, 0x02, 0x18, 0x18, 0x18, 0x18, 0x09, 0x0a, 0x10, 0x11,
// 	0x12, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
// 	0x04, 0x04, 0x04, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x64, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };

// // get report request type 0xa1 wValue 0x03f2
// static const uint8_t report_f2[] =
// {
// 	0xf2, 0xff, 0xff, 0x00, 0x08, 0xb2, 0x9f, 0x6e, 0x63, 0x25, 0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
// 	0x8a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
// 	0x04, 0x04, 0x04, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x64, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };

// // get report request type 0xa1 wValue 0x03f5
// static const uint8_t report_f5[] =
// {
// 	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x1a, 0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
// 	0x8a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
// 	0x04, 0x04, 0x04, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x64, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };

// // set report request type 0xa1 wValue 0x03f5
// // get 6 bytes from buffer at offset 2

// // get report request type 0xa1 wValue 0x03f5 2
// // copy 6 bytes from set report 0x03f5 to offset 2
// static const uint8_t report_f5_2[] =
// {
// 	0x01, 0x00, 0x50, 0x63, 0x13, 0x46, 0x79, 0x87, 0x21, 0x1a, 0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
// 	0x8a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
// 	0x04, 0x04, 0x04, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x64, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };

// // set report request type 0x21 wValue 0x03ef
// // get byte [6]

// // get report request type 0xa1 wValue 0x03ef
// // copy byte from set report 0x03ef to byte [7]
// static const uint8_t report_ef[] =
// {
// 	0x00, 0xef, 0x04, 0x00, 0x05, 0x03, 0x01, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x02, 0x03, 0x01, 0x95, 0x02, 0x05, 0x01, 0x92, 0x02, 0x00, 0x01, 0x8e, 0x01, 0xf2, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };

// // set report request type 0x21 wValue 0x03ef 2
// // get byte [6]

// // get report request type 0xa1 wValue 0x03ef 2
// // copy byte from set report 0x03ef 2 to byte [7]
// static const uint8_t report_ef_2[] =
// {
// 	0x00, 0xef, 0x04, 0x00, 0x05, 0x03, 0x01, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x02, 0x71, 0x02, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// };

// // get report request type 0xa1 wValue 0x03f7
// static const uint8_t report_f7[] =
// {
// 	0x01, 0x00, 0xf7, 0x02, 0xfd, 0x01, 0xee, 0xff, 0x10, 0x12, 0x00, 0x02, 0xe5, 0x01, 0xfd, 0x00,
// 	0x00, 0x02, 0x02, 0x02, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x62, 0x01, 0x02, 0x01,
// 	0x5e, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };

// // get report request type 0xa1 wValue 0x03f8
// static const uint8_t report_f8[] =
// {
// 	0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x33, 0x02, 0xc4, 0x01, 0xed, 0x00,
// 	0x00, 0x02, 0x02, 0x02, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x62, 0x01, 0x02, 0x01,
// 	0x5e, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };

// // set report requesttype 0x21 wValue 0x0201

// // starts get report 0x01 output
// static const uint8_t get_report_resp_01[] = 
// {
// 	0x01, 0x00, 0xf7, 0x02, 0xfd, 0x01, 0xee, 0xff, 0x10, 0x12, 0x00, 0x02, 0xe5, 0x01, 0xfd, 0x00,
// 	0x00, 0x02, 0x02, 0x02, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x62, 0x01, 0x02, 0x01,
// 	0x5e, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// };


const uint8_t report_01[] = {
    // //Sixaxis
    // 0x00, 0x01, 0x03, 0x00, 0x04, 0x0c, 0x01, 0x02,
    // 0x18, 0x18, 0x18, 0x18, 0x09, 0x0a, 0x10, 0x11,
    // 0x12, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
    // 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
    // 0x04, 0x04, 0x04, 0x00, 0x00, 0x01, 0x06, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    //Dualshock 3
    0x00, 0x01, 0x04, 0x00, 0x07, 0x0c, 0x01, 0x02,
    0x18, 0x18, 0x18, 0x18, 0x09, 0x0a, 0x10, 0x11,
    0x12, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
    0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x01,
    0x02, 0x07, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t report_f2[] = {
    // //Sixaxis
    // 0xf2, 0xff, 0xff, 0x00,
    // 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, //device bdaddr
    //             0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
    // 0x8a, 0x00, 0x00, 0x01, 0x64, 0x19, 0x01, 0x00,
    // 0x64, 0x00, 0x01, 0x90, 0x00, 0x19, 0xfe, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Dualshock 3
    0xf2, 0xff, 0xff, 0x00,
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, //device bdaddr
                0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
    0x8a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
    0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x01,
    0x02, 0x07, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t report_f5[] = {
    // //Sixaxis
    // 0x01, 0x00,
    // 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, //dummy PS3 bdaddr
    // 0x23, 0x1e, 0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
    // 0x8a, 0x00, 0x00, 0x01, 0x64, 0x19, 0x01, 0x00,
    // 0x64, 0x00, 0x01, 0x90, 0x00, 0x19, 0xfe, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Dualshock 3
    0x01, 0x00,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, //dummy PS3 bdaddr
    0xff, 0xf7, 0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
    0x8a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x04,
    0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x01,
    0x02, 0x07, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t report_ef[] = {
    // //Sixaxis
    // 0x00, 0xef, 0x03, 0x00, 0x04, 0x03, 0x01, 0xb0,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x02, 0x05, 0x01, 0x92, 0x02, 0x02, 0x01,
    // 0x91, 0x02, 0x05, 0x01, 0x91, 0x02, 0x04, 0x00,
    // 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Dualshock 3
    0x00, 0xef, 0x04, 0x00, 0x07, 0x03, 0x01, 0xb0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x6b, 0x02, 0x68, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t report_f8[] = {
    //Sixaxis
    // 0x00, 0x01, 0x00, 0x00, 0x07, 0x03, 0x01, 0xb0,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x02, 0x6b, 0x02, 0x68, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // //Dualshock 3
    0x00, 0x01, 0x00, 0x00, 0x07, 0x03, 0x01, 0xb0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x6b, 0x02, 0x68, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t report_f7[] = {
    //Sixaxis
    // 0x01, 0x00, 0x08, 0x03, 0xd2, 0x01, 0xee, 0xff,
    // 0x10, 0x02, 0x00, 0x03, 0x50, 0x81, 0xd8, 0x01,
    // 0x8a, 0x00, 0x00, 0x01, 0x64, 0x19, 0x01, 0x00,
    // 0x64, 0x00, 0x01, 0x90, 0x00, 0x19, 0xfe, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    //Dualshock 3
    0x01, 0x04, 0xc4, 0x02, 0xd6, 0x01, 0xee, 0xff,
    0x14, 0x13, 0x01, 0x02, 0xc4, 0x01, 0xd6, 0x00,
    0x00, 0x02, 0x02, 0x02, 0x00, 0x03, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x02, 0x62, 0x01, 0x02, 0x01,
    0x5e, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};